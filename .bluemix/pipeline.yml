stages:
- name: Build Stage
  inputs:
  - type: git
    branch: master
    service: ${REPO}
  triggers:
    - type: commit
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
- name: Deploy Stage
  inputs:
  - type: job
    stage: Build Stage
    job: Build
  triggers:
  - type: stage
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${CF_REGION_ID}
      organization: ${CF_ORGANIZATION}
      space: ${CF_SPACE}
      application: ${CF_APP}
    script: |-
      #!/bin/bash

      # Create services for app
      cf create-service "Auto-Scaling" "free" "swift-evolution-auto-scaling"

      get_urls() {
        APP_NAME=$1
        urls=$(cf app $APP_NAME | grep routes:)
        urls=${urls#routes: }
        urls=${urls//[[:blank:]]/}
        echo $urls
      }

      get_domains() {
        realms=$(cf domains | grep 'owned\|shared' | cut -d' ' -f1)
        realms=$(echo "$realms" | tr '\n' ' ')
        realms=${realms// /,}
        realms=$(echo $realms | rev | cut -c 2- | rev)
        echo $realms
      }

      get_url_prefixes() {
        paths=$1
        realms=$2
        prefixes=""
        IFS=',' read -ra urls <<< "$paths"
        IFS=',' read -ra domains <<< "$realms"
        for url in "${urls[@]}"; do
          for domain in "${domains[@]}"; do
            url=${url%.${domain}}
            if [ $url = $domain ]; then
              url=""
            fi
          done
          if [[ -z $prefixes ]]; then
            prefixes=$url
          else
            prefixes="$prefixes,$url"
          fi
        done
        echo $prefixes
      }

      parse_url() {
        url=$1
        realms=$2
        IFS=',' read -ra domains <<< "$realms"
        for domain in "${domains[@]}"; do
          prefix=${url%.${domain}}
          if [ $prefix != $url ]; then
            echo "$prefix $domain"
            break
          elif [ $prefix = $domain ]; then
            echo $domain
            break
          fi
        done
        echo ""
      }

      # Provision application
      if ! cf app $CF_APP > /dev/null 2>&1; then
        echo "Starting new app deployment..."
        cf push $CF_APP
        # Map additional routes as needed here...
        # domains=swift-evolution.io,mybluemix.net
        # data.swift-evolution.io,www.swift-evolution.io,swift-evolution.mybluemix.net,swift-evolution.io
      else
        # Push new version of the app
        echo "Starting app update deployment..."
        CF_APP_TMP="${CF_APP}-tmp"
        cf push $CF_APP_TMP --random-route

        urls=$(get_urls $CF_APP)
        echo "App URLs: $urls"
        domains=$(get_domains)
        echo "Domains: $domains"

        # Get tmp url for new app update
        tmp_urls=$(get_urls $CF_APP_TMP)
        echo "Temporary urls: $tmp_urls"

        # Update routes for updated and previous app
        IFS=',' read -ra paths <<< "$urls"
        for url in "${paths[@]}"; do
          parsed_url=$(parse_url $url $domains)
          echo "Parsed URL: $parsed_url"
          IFS=' ' read -ra items <<< "$parsed_url"
          if [ ${#items[@]} -eq 1 ]; then
            echo "No prefix found in URL."
            cf map-route $CF_APP_TMP ${items[0]} --hostname ""
            cf unmap-route $CF_APP ${items[0]} --hostname ""
          else
            cf map-route $CF_APP_TMP ${items[1]} --hostname ${items[0]}
            cf unmap-route $CF_APP ${items[1]} --hostname ${items[0]}
          fi
        done

        IFS=',' read -ra paths <<< "$tmp_urls"
        for url in "${paths[@]}"; do
          parsed_url=$(parse_url $url $domains)
          echo "Parsed tmp URL: $parsed_url"
          IFS=' ' read -ra items <<< "$parsed_url"
          if [ ${#items[@]} -eq 1 ]; then
            echo "No prefix found in tmp URL."
            cf unmap-route $CF_APP_TMP ${items[1]} --hostname ""
          else
            cf unmap-route $CF_APP_TMP ${items[1]} --hostname ${items[0]}
          fi
        done

        # Deprovision old version of app
        cf delete -f -r $CF_APP

        # Rename tmp app
        cf rename $CF_APP_TMP $CF_APP
      fi
